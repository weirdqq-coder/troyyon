import { GoogleGenAI, Modality } from "@google/genai";
import type { ImageData } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // In a real app, you might show a friendlier error to the user.
  throw new Error("API_KEY environment variable not set. Please set it to use the Gemini API.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const generateTryOnImage = async (
  userImage: ImageData,
  garmentImage: ImageData
): Promise<string> => {
  try {
    const model = 'gemini-2.5-flash-image';
    const prompt = 'You are an expert fashion stylist and photo editor. Your task is to perform a virtual try-on. Take the person from the first image and realistically dress them in the garment from the second image. The output must be a single, photorealistic image of the person wearing the garment. Maintain the original background, lighting, and pose as much as possible, ensuring a seamless and natural fit. Only return the final image.';

    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [
          {
            inlineData: {
              data: userImage.base64,
              mimeType: userImage.mimeType,
            },
          },
          {
            inlineData: {
              data: garmentImage.base64,
              mimeType: garmentImage.mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the AI. The response may contain safety blocks or other text.");
  } catch (error) {
    console.error("Error generating virtual try-on image:", error);
    if (error instanceof Error) {
        return Promise.reject(`Failed to generate image: ${error.message}`);
    }
    return Promise.reject("An unknown error occurred during image generation.");
  }
};
